{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","save","renderForm","renderDisplay","randomBetween","componentWillMount","style","right","window","innerWidth","top","innerHeight","transform","concat","x","y","s","Math","ceil","random","setState","onRemove","index","e","preventDefault","onChange","_newText","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","id","children","onClick","Component","Board","notes","add","nextId","eachNote","update","self","count","fetch","then","response","json","split","forEach","sentence","substring","newText","i","console","log","prevState","map","note","objectSpread","text","toConsumableArray","uniqueId","filter","src_Note","key","React","Boolean","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e69a572.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Note extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tediting: false\n\t\t}\n\t\tthis.edit = this.edit.bind(this)\n\t\tthis.remove = this.remove.bind(this)\n\t\tthis.save = this.save.bind(this)\n\t\tthis.renderForm = this.renderForm.bind(this)\n\t\tthis.renderDisplay = this.renderDisplay.bind(this)\n        \n        this.randomBetween = this.randomBetween.bind(this)\n        this.componentWillMount = this.componentWillMount.bind(this)\n\t}\n    \n    componentWillMount() {\n        this.style = {\n            right: this.randomBetween(0, window.innerWidth - 150, 'px'),\n            top: this.randomBetween(0, window.innerHeight - 150, 'px'),\n            transform: `rotate(${this.randomBetween(-25, 25,'deg')})`\n        }\n    }\n    \n    randomBetween(x,y,s) {\n        return x + Math.ceil(Math.random() * (y-x)) + s\n    }\n\n    /*\n\tcomponentDidUpdate() {\n\t\tvar textArea\n\t\tif(this.state.editing) {\n\t\t\ttextArea = this._newText\n\t\t\ttextArea.focus()\n\t\t\ttextArea.select()\n\t\t}\n\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn (\n\t\t\tthis.props.children !== nextProps.children || this.state !== nextState\n\t\t)\n\t}\n*/\n\tedit() {\n\t\tthis.setState({\n\t\t\tediting: true\n\t\t})\n\t}\n\n\tremove() {\n\t\tthis.props.onRemove(this.props.index)\n\t}\n\n\tsave(e) {\n\t\te.preventDefault()\n\t\tthis.props.onChange(this._newText.value, this.props.index)\n\t\tthis.setState({\n\t\t\tediting: false\n\t\t})\n\t}\n\n\trenderForm() {\n\t\treturn (\n\t\t\t<div className=\"note\" style={this.style}>\n\t\t\t\t<form onSubmit={this.save}>\n\t\t\t\t\t<textarea ref={input => this._newText = input}/>\n\t\t\t\t\t<button id=\"save\">Save</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n\n\trenderDisplay() {\n\t\treturn (\n\t\t\t<div className=\"note\" style = {this.style}>\n\t\t\t\t<p>{this.props.children}</p>\n\t\t\t\t<span>\n\t\t\t\t\t<button onClick={this.edit} id=\"edit\">Edit</button>\n\t\t\t\t\t<button onClick={this.remove} id=\"remove\">Remove</button>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t)\n\t}\n\trender() {\n\t\treturn this.state.editing ? this.renderForm() : this.renderDisplay()\n\t}\n\n}\n\nexport default Note\n\n\n\n\n\n","import React from 'react'\nimport Note from './Note'\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            notes: []\n        }\n        this.add = this.add.bind(this)\n        this.nextId = this.nextId.bind(this)\n        this.eachNote = this.eachNote.bind(this)\n        this.update = this.update.bind(this)\n        this.remove = this.remove.bind(this)\n        this.componentWillMount = this.componentWillMount.bind(this)\n    }\n    \n    componentWillMount() {\n\t\tvar self = this\n\t\n\t\tif(this.props.count) {\n\t\t\tfetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(json => json[0]\n\t\t\t\t\t\t\t\t.split('. ')\n\t\t\t\t\t\t\t\t.forEach(sentence => self.add(sentence.substring(0, 25))))\n\t\t}\n\t\t\n\t}\n    \n    update(newText,i) {\n        console.log('updating item at index',i,newText)\n        this.setState(prevState => ({\n            notes: prevState.notes.map(\n                note => (note.id !== i) ? note : {...note, note: newText})\n        }))\n    }\n    \n    add(text) {\n        this.setState(prevState => ({\n            notes : [\n            ...prevState.notes,\n            {\n                id:this.nextId(),\n                note:text\n            }\n            ]\n        }))\n    }\n    \n    nextId() {\n        this.uniqueId = this.uniqueId || 0\n        return this.uniqueId++\n    }\n    \n    remove(id) {\n        console.log('removing item at', id)\n        this.setState(prevState => ({\n            notes: prevState.notes.filter(note => note.id !== id)\n        }))\n    }\n    eachNote(note, i) {\n        return (\n            <Note key = {i}\n                index = {i}\n                onChange={this.update}\n                onRemove={this.remove}>\n                {note.note}\n                </Note>\n        )\n    }\n    render() {\n        return (\n            <div className=\"board\">\n                <button onClick={this.add.bind(null, \"New Node\")} id =\"add\"> Add </button>\n                {this.state.notes.map(this.eachNote)}\n            </div>\n        )\n    }\n}\n\nexport default Board\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board count={50} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}